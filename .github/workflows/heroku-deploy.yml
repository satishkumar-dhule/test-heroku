name: Deploy to Heroku

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Select release version to deploy'
        required: true
        type: choice
        options:
          - 'v1.9.26'
          - 'v1.9.25'
          - 'v1.9.24'
          - 'v1.9.23'
          - 'v1.9.22'
          - 'v1.9.21'
          - 'v1.9.20'
          - 'v1.9.19'
          - 'v1.9.18'
          - 'v1.9.17'
        default: 'v1.9.26'
      heroku_app_name:
        description: 'Heroku app name'
        required: true
        default: 'test-heroku-dhule'
        type: string

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: |
          curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz | tar xz -C /opt
          sudo ln -s /opt/apache-maven-3.9.6/bin/mvn /usr/local/bin/mvn
          mvn --version

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku --version

      - name: Authenticate Heroku CLI
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | heroku auth:token
          heroku auth:whoami
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Download JAR from GitHub Packages
        run: |
          RELEASE_VERSION="${{ inputs.release_version }}"
          VERSION_NUMBER=${RELEASE_VERSION#v}  # Remove 'v' prefix
          
          echo "Downloading JAR for version: $VERSION_NUMBER"
          echo "Release tag: $RELEASE_VERSION"
          
          # Try to download from GitHub Packages first
          echo "Attempting to download from GitHub Packages..."
          mvn dependency:copy \
            -Dartifact=com.example:demo-webapp:$VERSION_NUMBER:jar \
            -DoutputDirectory=./target \
            -Dmdep.stripVersion=true \
            -DremoteRepositories=github::::https://maven.pkg.github.com/satishkumar-dhule/test-heroku \
            -s maven-settings.xml || {
            echo "GitHub Packages download failed, trying GitHub Releases..."
            
            # Fallback: Download from GitHub Releases
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/satishkumar-dhule/test-heroku/releases/tags/$RELEASE_VERSION" \
              | jq -r '.assets[] | select(.name | endswith(".jar")) | .browser_download_url' \
              | head -1 \
              | xargs curl -L -o target/demo-webapp.jar
          }
          
          # Verify JAR file exists and is valid
          if [ -f "target/demo-webapp.jar" ]; then
            echo "‚úÖ JAR file downloaded successfully"
            echo "JAR file size: $(ls -lh target/demo-webapp.jar)"
            
            # Verify it's a valid JAR
            if jar tf target/demo-webapp.jar > /dev/null 2>&1; then
              echo "‚úÖ JAR file is valid"
            else
              echo "‚ùå Downloaded file is not a valid JAR"
              exit 1
            fi
          else
            echo "‚ùå Failed to download JAR file"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Heroku Deployment
        run: |
          echo "Preparing deployment for Heroku app: ${{ inputs.heroku_app_name }}"
          
          # Create Procfile if it doesn't exist
          if [ ! -f "Procfile" ]; then
            echo "web: java -Dserver.port=\$PORT -jar target/demo-webapp.jar" > Procfile
            echo "‚úÖ Created Procfile"
          fi
          
          # Create system.properties if it doesn't exist
          if [ ! -f "system.properties" ]; then
            echo "java.runtime.version=17" > system.properties
            echo "‚úÖ Created system.properties"
          fi
          
          echo "üìã Deployment files:"
          ls -la Procfile system.properties target/demo-webapp.jar

      - name: Deploy to Heroku
        run: |
          APP_NAME="${{ inputs.heroku_app_name }}"
          RELEASE_VERSION="${{ inputs.release_version }}"
          
          echo "üöÄ Deploying $RELEASE_VERSION to Heroku app: $APP_NAME"
          
          # Configure git for Heroku
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Add Heroku remote
          heroku git:remote -a "$APP_NAME"
          
          # Add deployment files to git
          git add -f target/demo-webapp.jar Procfile system.properties
          git commit -m "Deploy $RELEASE_VERSION to Heroku" || echo "No changes to commit"
          
          # Push to Heroku
          git push heroku HEAD:main --force
          
          echo "‚úÖ Deployment completed successfully"
          
          # Get app URL
          APP_URL=$(heroku apps:info -a "$APP_NAME" --json | jq -r '.app.web_url')
          echo "üåê Application URL: $APP_URL"
          
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Verify Deployment
        run: |
          APP_NAME="${{ inputs.heroku_app_name }}"
          RELEASE_VERSION="${{ inputs.release_version }}"
          
          echo "üîç Verifying deployment..."
          
          # Wait for app to start
          sleep 30
          
          # Get app URL
          APP_URL=$(heroku apps:info -a "$APP_NAME" --json | jq -r '.app.web_url')
          
          # Test the application
          echo "Testing application at: $APP_URL"
          
          if curl -f -s "$APP_URL" > /dev/null; then
            echo "‚úÖ Application is responding successfully"
            echo "üéâ Deployment of $RELEASE_VERSION completed and verified!"
          else
            echo "‚ö†Ô∏è Application might be starting up or there could be an issue"
            echo "Check the Heroku logs: heroku logs --tail -a $APP_NAME"
          fi
          
          # Show recent logs
          echo "üìã Recent application logs:"
          heroku logs --tail --num 20 -a "$APP_NAME" || echo "Could not fetch logs"
          
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }} 