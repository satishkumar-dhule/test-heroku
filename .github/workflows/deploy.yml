name: Deploy to Heroku

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GH_TOKEN

      - name: Get Release Version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Extract version from release tag (removes 'v' prefix if present)
            VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
          else
            # For manual workflow runs, get the latest release version
            VERSION=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | \
              jq -r '.tag_name' | sed 's/^v//')
          fi
          
          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Download Release Artifact
        run: |
          echo "Downloading version ${{ steps.get_version.outputs.version }}"
          
          # Download the specific version from GitHub Packages
          mvn dependency:get \
            -DremoteRepositories=github::default::https://maven.pkg.github.com/${{ github.repository }} \
            -DgroupId=com.example \
            -DartifactId=demo-webapp \
            -Dversion=${{ steps.get_version.outputs.version }} \
            -Dpackaging=war \
            -Dtransitive=false
          
          # Copy the artifact to target directory for Heroku deployment
          mkdir -p target
          cp ~/.m2/repository/com/example/demo-webapp/${{ steps.get_version.outputs.version }}/demo-webapp-${{ steps.get_version.outputs.version }}.war target/demo-webapp.war
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          procfile: "web: java -jar target/demo-webapp.war"
          healthcheck: "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/health"
          rollbackOnError: true
          checkString: "ok"
          delay: 30

      - name: Verify Deployment
        run: |
          # Give the app a moment to start
          sleep 10
          # Try the health endpoint first
          if curl -f "https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/hello"; then
            echo "Deployment verified successfully"
            exit 0
          else
            echo "Health check failed"
            exit 1
          fi
