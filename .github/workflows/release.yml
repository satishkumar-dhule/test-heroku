name: Semantic Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: |
          curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz | tar xz -C /opt
          sudo ln -s /opt/apache-maven-3.9.6/bin/mvn /usr/local/bin/mvn
          mvn --version

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global push.default simple

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Setup Git Remote with Token
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/satishkumar-dhule/test-heroku.git
          git remote -v

      - name: Extract and Fix Project Version
        id: versioning
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s maven-settings.xml | tail -1)
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "Current version: $VERSION"
          echo "Release version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          if [[ $VERSION != *-SNAPSHOT ]]; then
            echo "Fixing non-SNAPSHOT version: $VERSION → $VERSION-SNAPSHOT"
            mvn versions:set -DnewVersion="$VERSION-SNAPSHOT" -q -s maven-settings.xml
            git add pom.xml
            git commit -m "fix: restore SNAPSHOT version $VERSION-SNAPSHOT" || true
            git push origin main || true
          fi

          # Delete incorrect or old tags
          for tag in "v$RELEASE_VERSION" "v$RELEASE_VERSION-SNAPSHOT"; do
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Deleting tag $tag"
              git tag -d "$tag" || true
              git push origin ":refs/tags/$tag" || true
            fi
          done

      - name: Build Project First
        run: |
          echo "Building project to ensure JAR files are available..."
          mvn clean package -s maven-settings.xml -DskipTests=false
          echo "Build completed. Contents of target/:"
          ls -la target/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Prepare Maven Release
        run: |
          RELEASE_VERSION=${{ steps.versioning.outputs.release_version }}
          NEXT_SNAPSHOT="${RELEASE_VERSION%.*}.$((${RELEASE_VERSION##*.}+1))-SNAPSHOT"
          echo "Preparing release: $RELEASE_VERSION → $NEXT_SNAPSHOT"
          
          # Clean up any previous release artifacts
          rm -f pom.xml.releaseBackup pom.xml.next pom.xml.tag release.properties
          
          # Check if tag already exists
          if git rev-parse "v$RELEASE_VERSION" >/dev/null 2>&1; then
            echo "Tag v$RELEASE_VERSION already exists, skipping release preparation"
          else
            mvn -B release:prepare \
              -DreleaseVersion=$RELEASE_VERSION \
              -DdevelopmentVersion=$NEXT_SNAPSHOT \
              -Dtag=v$RELEASE_VERSION \
              -DautoVersionSubmodules=true \
              -DpushChanges=true \
              -DscmCommentPrefix="[release] " \
              -s maven-settings.xml
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Perform Maven Release
        run: |
          echo "Fetching latest changes and tags..."
          git fetch --tags
          git checkout main
          git pull origin main
          
          # Only perform release if there are release artifacts
          if [ -f "release.properties" ]; then
            echo "Performing Maven release with GitHub credentials..."
            echo "GITHUB_ACTOR: $GITHUB_ACTOR"
            mvn -B release:perform \
              -s maven-settings.xml \
              -Darguments="-DskipTests -s maven-settings.xml"
          else
            echo "No release.properties found, skipping release:perform"
            echo "This might mean the release was already completed or prepare step was skipped"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Deploy to GitHub Packages
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          echo "Deploying JAR to GitHub Packages for $VERSION"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "Repository: $GITHUB_REPOSITORY"
          
          # Verify authentication
          echo "Verifying GitHub authentication..."
          curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | head -5 || echo "Auth check failed"
          
          # Find the built JAR file and deploy
          if [ -f "target/demo-webapp.jar" ]; then
            echo "Found JAR file: target/demo-webapp.jar"
            echo "JAR file size: $(ls -lh target/demo-webapp.jar)"
            
            # Deploy the JAR to GitHub Packages with explicit settings
            echo "Deploying to GitHub Packages..."
            mvn deploy \
              -s maven-settings.xml \
              -DskipTests=true \
              -Dregistry=https://maven.pkg.github.com/satishkumar-dhule/test-heroku \
              -Dtoken=$GITHUB_TOKEN \
              -X
            echo "✅ Successfully deployed to GitHub Packages"
            
          elif [ -f "target/checkout/target/demo-webapp.jar" ]; then
            echo "Found JAR file: target/checkout/target/demo-webapp.jar"
            echo "JAR file size: $(ls -lh target/checkout/target/demo-webapp.jar)"
            cd target/checkout
            
            echo "Deploying to GitHub Packages from checkout directory..."
            mvn deploy \
              -s ../../maven-settings.xml \
              -DskipTests=true \
              -Dregistry=https://maven.pkg.github.com/satishkumar-dhule/test-heroku \
              -Dtoken=$GITHUB_TOKEN \
              -X
            cd ../..
            echo "✅ Successfully deployed to GitHub Packages"
            
          else
            echo "❌ No JAR file found for deployment"
            echo "Contents of target/:"
            ls -la target/ || echo "No target directory"
            echo "Contents of target/checkout/target/ (if exists):"
            ls -la target/checkout/target/ 2>/dev/null || echo "No checkout target directory"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      # Removed Generate Release Notes step - using inline notes instead

      - name: Create GitHub Release
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          
          echo "Creating simple GitHub Release for $VERSION"
          
          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "✅ Release $VERSION already exists, skipping"
            exit 0
          fi
          
          # Create simple release notes
          echo "Release $VERSION" > simple-notes.txt
          echo "" >> simple-notes.txt
          echo "Automated release of demo-webapp" >> simple-notes.txt
          
          # Create release with minimal parameters
          echo "Creating release with minimal configuration..."
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes "Release $VERSION - Automated release of demo-webapp"
          
          # Upload JAR if it exists
          if [ -f "target/demo-webapp.jar" ]; then
            echo "Uploading JAR file..."
            gh release upload "$VERSION" "target/demo-webapp.jar" || echo "JAR upload failed but continuing..."
          fi
          
          echo "✅ Release creation completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Install Heroku CLI
      #   run: |
      #     curl https://cli-assets.heroku.com/install.sh | sh
      #     heroku --version

      # - name: Deploy to Heroku
      #   run: |
      #     heroku git:remote -a test-heroku-dhule
      #     git push heroku main || {
      #       echo "❌ Heroku deployment failed, but continuing..."
      #       echo "This might be expected if the Heroku app doesn't exist or credentials are not configured."
      #       exit 0
      #     }
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}