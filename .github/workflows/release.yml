name: Semantic Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Extract and Fix Project Version
        id: versioning
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          if [[ $VERSION != *-SNAPSHOT ]]; then
            echo "Fixing non-SNAPSHOT version: $VERSION ‚Üí $VERSION-SNAPSHOT"
            mvn versions:set -DnewVersion="$VERSION-SNAPSHOT" -q
            git add pom.xml
            git commit -m "fix: restore SNAPSHOT version $VERSION-SNAPSHOT" || true
            git push origin main || true
          fi

          # Delete incorrect or old tags
          for tag in "v$RELEASE_VERSION" "v$RELEASE_VERSION-SNAPSHOT"; do
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Deleting tag $tag"
              git tag -d "$tag" || true
              git push origin ":refs/tags/$tag" || true
            fi
          done

      - name: Prepare Maven Release
        run: |
          RELEASE_VERSION=${{ steps.versioning.outputs.release_version }}
          NEXT_SNAPSHOT="${RELEASE_VERSION%.*}.$((${RELEASE_VERSION##*.}+1))-SNAPSHOT"
          mvn -B release:prepare \
            -DreleaseVersion=$RELEASE_VERSION \
            -DdevelopmentVersion=$NEXT_SNAPSHOT \
            -Dtag=v$RELEASE_VERSION \
            -DautoVersionSubmodules=true \
            -DpushChanges=true \
            --settings .github/maven-settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform Maven Release
        run: |
          git fetch --tags
          git checkout main
          git pull origin main
          mvn -B release:perform --settings .github/maven-settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          echo "Generating release notes for $VERSION"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            git log --pretty=%s "$VERSION"^.."$VERSION" > release-notes.txt || {
              echo "Release $VERSION for demo-webapp" > release-notes.txt
            }
          else
            echo "Release $VERSION for demo-webapp" > release-notes.txt
          fi
          echo "notes_path=release-notes.txt" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          NOTES_FILE="${{ steps.release_notes.outputs.notes_path }}"
          
          echo "üîé GH_DEBUG=api enabled for verbose output"

          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "‚úÖ Release $VERSION already exists, skipping"
          else
            COMMIT_SHA=$(git rev-parse "$VERSION" 2>/dev/null || git rev-parse HEAD)
            echo "üîß Resolved commit SHA: $COMMIT_SHA"

            echo "üìÇ Contents of target/:"
            ls -lh target || echo "‚ö†Ô∏è No target directory"

            echo "üì§ Creating release $VERSION with notes from $NOTES_FILE"
            GH_DEBUG=api gh release create "$VERSION" \
              --title "Release $VERSION" \
              --notes-file "$NOTES_FILE" \
              --target "$COMMIT_SHA" \
              target/*.jar
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Heroku
        run: |
          heroku git:remote -a test-heroku-dhule
          git push heroku main || {
            echo "‚ùå Heroku deployment failed"
            exit 1
          }
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    permissions:
      contents: write # Allow pushing commits, tags, and creating releases
      packages: write # Allow publishing to GitHub Packages