name: Semantic Release
on:
  push:
    branches:
      - main
      - master
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git log parsing
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Validate and Fix POM Version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ $VERSION != *-SNAPSHOT ]]; then
            echo "Warning: POM version ($VERSION) is not a SNAPSHOT version, fixing to $VERSION-SNAPSHOT"
            mvn versions:set -DnewVersion=$VERSION-SNAPSHOT -q
            git add pom.xml
            git commit -m "Fix pom.xml version to $VERSION-SNAPSHOT" || true
            git push origin main || true
          fi
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          # Check and clean up existing tag
          if git rev-parse "v$RELEASE_VERSION" >/dev/null 2>&1; then
            echo "Tag v$RELEASE_VERSION already exists, deleting it"
            git tag -d "v$RELEASE_VERSION" || true
            git push origin :refs/tags/v$RELEASE_VERSION || true
          fi
      - name: Prepare Maven Release
        run: |
          mvn -B release:prepare -DautoVersionSubmodules=true -DpushChanges=true --settings .github/maven-settings.xml || {
            echo "Maven release:prepare failed, exiting"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Fetch Tags and Update Branch
        run: |
          git fetch --tags
          git fetch origin main
          git checkout main
          git pull origin main
      - name: Perform Maven Release
        run: |
          mvn -B release:perform --settings .github/maven-settings.xml || {
            echo "Maven release:perform failed, exiting"
            exit 1
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes for v${{ steps.get_version.outputs.version }}"
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            git log --pretty=%s v${{ steps.get_version.outputs.version }}^..v${{ steps.get_version.outputs.version }} > release-notes.txt 2>/dev/null || {
              echo "Warning: Could not generate release notes, using default"
              echo "Release v${{ steps.get_version.outputs.version }} for demo-webapp" > release-notes.txt
            }
          else
            echo "Warning: Tag v${{ steps.get_version.outputs.version }} not found, using default notes"
            echo "Release v${{ steps.get_version.outputs.version }} for demo-webapp" > release-notes.txt
          fi
          echo "notes_path=release-notes.txt" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        run: |
          if gh release view v${{ steps.get_version.outputs.version }} >/dev/null 2>&1; then
            echo "Release v${{ steps.get_version.outputs.version }} already exists, skipping"
          else
            COMMIT_SHA=$(git rev-parse v${{ steps.get_version.outputs.version }} 2>/dev/null || git rev-parse main)
            gh release create v${{ steps.get_version.outputs.version }} \
              --title "Release v${{ steps.get_version.outputs.version }}" \
              --notes-file ${{ steps.release_notes.outputs.notes_path }} \
              --target "$COMMIT_SHA" \
              target/*.jar || {
                echo "Failed to create GitHub Release, continuing"
                exit 0
              }
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to Heroku
        run: |
          heroku git:remote -a test-heroku-dhule # Replace with your Heroku app name
          git push heroku main || {
            echo "Heroku deployment failed, please check Heroku configuration"
            exit 0
          }
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    permissions:
      contents: write # Allow pushing commits, tags, and creating releases
      packages: write # Allow publishing to GitHub Packages