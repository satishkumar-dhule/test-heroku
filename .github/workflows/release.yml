name: Semantic Release

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Maven
        run: |
          curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz | tar xz -C /opt
          sudo ln -s /opt/apache-maven-3.9.6/bin/mvn /usr/local/bin/mvn
          mvn --version

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global push.default simple

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Setup Git Remote with Token
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/satishkumar-dhule/test-heroku.git
          git remote -v

      - name: Extract and Fix Project Version
        id: versioning
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s maven-settings.xml | tail -1)
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "Current version: $VERSION"
          echo "Release version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          if [[ $VERSION != *-SNAPSHOT ]]; then
            echo "Fixing non-SNAPSHOT version: $VERSION ‚Üí $VERSION-SNAPSHOT"
            mvn versions:set -DnewVersion="$VERSION-SNAPSHOT" -q -s maven-settings.xml
            git add pom.xml
            git commit -m "fix: restore SNAPSHOT version $VERSION-SNAPSHOT" || true
            git push origin main || true
          fi

          # Delete incorrect or old tags
          for tag in "v$RELEASE_VERSION" "v$RELEASE_VERSION-SNAPSHOT"; do
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Deleting tag $tag"
              git tag -d "$tag" || true
              git push origin ":refs/tags/$tag" || true
            fi
          done

      - name: Build Project First
        run: |
          echo "Building project to ensure JAR files are available..."
          mvn clean package -s maven-settings.xml -DskipTests=false
          echo "Build completed. Contents of target/:"
          ls -la target/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Prepare Maven Release
        run: |
          RELEASE_VERSION=${{ steps.versioning.outputs.release_version }}
          NEXT_SNAPSHOT="${RELEASE_VERSION%.*}.$((${RELEASE_VERSION##*.}+1))-SNAPSHOT"
          echo "Preparing release: $RELEASE_VERSION ‚Üí $NEXT_SNAPSHOT"
          
          # Clean up any previous release artifacts
          rm -f pom.xml.releaseBackup pom.xml.next pom.xml.tag release.properties
          
          # Check if tag already exists
          if git rev-parse "v$RELEASE_VERSION" >/dev/null 2>&1; then
            echo "Tag v$RELEASE_VERSION already exists, skipping release preparation"
          else
            mvn -B release:prepare \
              -DreleaseVersion=$RELEASE_VERSION \
              -DdevelopmentVersion=$NEXT_SNAPSHOT \
              -Dtag=v$RELEASE_VERSION \
              -DautoVersionSubmodules=true \
              -DpushChanges=true \
              -DscmCommentPrefix="[release] " \
              -s maven-settings.xml
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Perform Maven Release
        run: |
          echo "Fetching latest changes and tags..."
          git fetch --tags
          git checkout main
          git pull origin main
          
          # Only perform release if there are release artifacts
          if [ -f "release.properties" ]; then
            echo "Performing Maven release with GitHub credentials..."
            echo "GITHUB_ACTOR: $GITHUB_ACTOR"
            mvn -B release:perform \
              -s maven-settings.xml \
              -Darguments="-DskipTests -Dmaven.deploy.skip=true -s maven-settings.xml"
          else
            echo "No release.properties found, skipping release:perform"
            echo "This might mean the release was already completed or prepare step was skipped"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          echo "Generating release notes for $VERSION"
          
          # Create simple, reliable release notes
          echo "# Release $VERSION" > release-notes.txt
          echo "" >> release-notes.txt
          echo "## What's Changed" >> release-notes.txt
          echo "- Release $VERSION of demo-webapp" >> release-notes.txt
          echo "- Built with Java 17 and Maven" >> release-notes.txt
          echo "- Includes all dependencies in shaded JAR" >> release-notes.txt
          echo "" >> release-notes.txt
          echo "## Artifacts" >> release-notes.txt
          echo "- demo-webapp.jar - Executable JAR with all dependencies" >> release-notes.txt
          echo "" >> release-notes.txt
          echo "## Installation" >> release-notes.txt
          echo '```bash' >> release-notes.txt
          echo "java -jar demo-webapp.jar" >> release-notes.txt
          echo '```' >> release-notes.txt
          echo "" >> release-notes.txt
          echo "Generated automatically by GitHub Actions" >> release-notes.txt
          
          echo "Release notes generated:"
          cat release-notes.txt
          echo "notes_path=release-notes.txt" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          VERSION="v${{ steps.versioning.outputs.release_version }}"
          NOTES_FILE="${{ steps.release_notes.outputs.notes_path }}"
          
          echo "Creating GitHub Release for $VERSION"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Actor: $GITHUB_ACTOR"
          
          # Verify GitHub CLI authentication
          if ! gh auth status >/dev/null 2>&1; then
            echo "‚ùå GitHub CLI not authenticated"
            exit 1
          fi
          echo "‚úÖ GitHub CLI authenticated"

          # Check if release already exists
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "‚úÖ Release $VERSION already exists, skipping"
            exit 0
          fi

          # Get commit SHA - use HEAD since we just created the tag
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "üîß Target commit SHA: $COMMIT_SHA"
          
          # Verify the commit exists
          if ! git cat-file -e "$COMMIT_SHA" 2>/dev/null; then
            echo "‚ùå Commit SHA $COMMIT_SHA does not exist"
            exit 1
          fi

          # Find JAR file
          JAR_FILE=""
          if [ -f "target/demo-webapp.jar" ]; then
            JAR_FILE="target/demo-webapp.jar"
            echo "‚úÖ Found JAR file: $JAR_FILE"
            echo "JAR file size: $(ls -lh "$JAR_FILE" | awk '{print $5}')"
          elif [ -f "target/checkout/target/demo-webapp.jar" ]; then
            JAR_FILE="target/checkout/target/demo-webapp.jar"
            echo "‚úÖ Found JAR file: $JAR_FILE"
            echo "JAR file size: $(ls -lh "$JAR_FILE" | awk '{print $5}')"
          else
            echo "‚ö†Ô∏è No JAR files found"
            ls -la target/ || echo "No target directory"
          fi

          # Create release with retry logic
          echo "üì§ Creating release $VERSION"
          for attempt in 1 2 3; do
            echo "Attempt $attempt to create release..."
            
            if [ -n "$JAR_FILE" ] && [ -f "$JAR_FILE" ]; then
              if gh release create "$VERSION" \
                --title "Release $VERSION" \
                --notes-file "$NOTES_FILE" \
                --target "$COMMIT_SHA"; then
                echo "‚úÖ Release created successfully"
                echo "üìé Uploading JAR file..."
                if gh release upload "$VERSION" "$JAR_FILE"; then
                  echo "‚úÖ JAR file uploaded successfully"
                  break
                else
                  echo "‚ùå JAR upload failed, but release was created"
                  break
                fi
              fi
            else
              if gh release create "$VERSION" \
                --title "Release $VERSION" \
                --notes-file "$NOTES_FILE" \
                --target "$COMMIT_SHA"; then
                echo "‚úÖ Release created successfully (no JAR file)"
                break
              fi
            fi
            
            echo "‚ùå Attempt $attempt failed"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}

      # - name: Install Heroku CLI
      #   run: |
      #     curl https://cli-assets.heroku.com/install.sh | sh
      #     heroku --version

      # - name: Deploy to Heroku
      #   run: |
      #     heroku git:remote -a test-heroku-dhule
      #     git push heroku main || {
      #       echo "‚ùå Heroku deployment failed, but continuing..."
      #       echo "This might be expected if the Heroku app doesn't exist or credentials are not configured."
      #       exit 0
      #     }
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}