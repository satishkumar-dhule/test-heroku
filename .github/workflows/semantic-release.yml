name: Release Management

on:
  push:
    branches: [main, master]

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GH_TOKEN

      - name: Verify Maven Settings
        run: |
          echo "Checking ~/.m2/settings.xml content:"
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>\${env.GITHUB_ACTOR}</username>
                <password>\${env.GH_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF
          echo "Settings.xml content:"
          cat ~/.m2/settings.xml
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ACTOR: ${{ secrets.GH_USER }}

      - name: Get commit messages
        id: get_commits
        run: |
          COMMITS=$(git log --format=%B $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          echo "commits=$(echo "$COMMITS" | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: bump
        run: |
          COMMITS="${{ steps.get_commits.outputs.commits }}"
          if echo "$COMMITS" | grep -q 'BREAKING CHANGE:\|feat!:\|fix!:'; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q 'feat:'; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q 'fix:\|docs:\|test:\|refactor:\|style:\|chore:'; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi
          
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          LATEST_TAG=${{ steps.bump.outputs.latest_tag }}
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "${{ steps.bump.outputs.type }}" in
            "major")
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            "patch")
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
            *)
              NEW_VERSION="$CURRENT_VERSION"
              ;;
          esac
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version and commit changes
        if: steps.bump.outputs.type != 'none'
        run: |
          echo "Current version: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo "New version to set: ${{ steps.version.outputs.new_version }}"
          
          # Configure git first
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "Updating main project version..."
          mvn versions:set -DnewVersion=${{ steps.version.outputs.new_version }} -DgenerateBackupPoms=false
          
          echo "Building and publishing main webapp..."
          mvn clean deploy -DskipTests \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository }}
          
          echo "Updating consumer-app version..."
          cd consumer-app
          mvn versions:set -DnewVersion=${{ steps.version.outputs.new_version }} -DgenerateBackupPoms=false
          cd ..
          
          echo "Staging changes..."
          git add **/pom.xml
          git add **/pom.xml
          
          echo "Checking git status after staging..."
          git status
          
          # Show what will be committed
          git diff --cached
          
          # Verify if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes detected in pom.xml files"
            echo "Current directory contents:"
            ls -la
            echo "Main pom.xml content:"
            cat pom.xml
            echo "Consumer app pom.xml content:"
            cat consumer-app/pom.xml
            exit 1
          fi
          
          # Commit and tag
          git commit -m "chore(release): v${{ steps.version.outputs.new_version }} [skip ci]"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          
          # Push changes and tags
          git push origin HEAD:${{ github.ref }} --tags
        
      - name: Build with Maven
        if: steps.bump.outputs.type != 'none'
        run: mvn -B clean package
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Generate and create release
        if: steps.bump.outputs.type != 'none'
        run: |
          # Generate temporary release notes
          TEMP_NOTES=$(mktemp)
          echo "## What's Changed" > "$TEMP_NOTES"
          echo "${{ steps.get_commits.outputs.commits }}" | grep -E '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert):' | sed 's/^/- /' >> "$TEMP_NOTES"
          
          # Create release with assets using GitHub CLI
          gh release create "v${{ steps.version.outputs.new_version }}" \
            --title "Release v${{ steps.version.outputs.new_version }}" \
            --notes-file "$TEMP_NOTES" \
            ./target/myapp.war
          
          # Clean up temporary file
          rm -f "$TEMP_NOTES"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Commit version update
        if: steps.bump.outputs.type != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "chore(release): v${{ steps.version.outputs.new_version }} [skip ci]"
          git push

      - name: Build and Tag
        run: |
          mvn -B versions:set -DnewVersion=${{ steps.version.outputs.new_version }}
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git commit -am "chore(release): prepare release ${{ steps.version.outputs.new_version }}"
          git tag -a v${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}"
          git push --follow-tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
