name: Release Management

on:
  push:
    branches: [main, master]

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GH_TOKEN


      - name: Verify Maven Settings
        run: |
          echo "Checking ~/.m2/settings.xml content:"
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                      http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>\${env.GITHUB_ACTOR}</username>
                <password>\${env.GH_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF
          echo "Settings.xml content:"
          cat ~/.m2/settings.xml
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_ACTOR: ${{ secrets.GH_USER }}

      - name: Determine and Set Next Version
        id: version
        run: |
          # Function to increment version
          increment_version() {
            local version=$1
            if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-SNAPSHOT)?$ ]]; then
              local major=${BASH_REMATCH[1]}
              local minor=${BASH_REMATCH[2]}
              local patch=${BASH_REMATCH[3]}
              
              # For semantic versioning based on commit messages
              if echo "$COMMITS" | grep -q "BREAKING CHANGE:\|feat!:\|fix!:"; then
                major=$((major + 1))
                minor=0
                patch=0
              elif echo "$COMMITS" | grep -q "feat:"; then
                minor=$((minor + 1))
                patch=0
              else
                patch=$((patch + 1))
              fi
              
              echo "${major}.${minor}.${patch}"
            else
              echo "Invalid version format"
              exit 1
            fi
          }
          
          # Get commit messages
          COMMITS=$(git log --format=%B $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          
          # Get current version and remove -SNAPSHOT if present
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          VERSION=$CURRENT_VERSION
          
          # Keep trying until we find an available version
          while mvn dependency:get -Dartifact=com.example:demo-webapp:${VERSION}:war \
            -DremoteRepositories=github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY} \
            -Dtransitive=false -quiet 2>/dev/null; do
            echo "Version ${VERSION} exists, incrementing..."
            VERSION=$(increment_version "$VERSION")
          done
          
          echo "Found available version: $VERSION"
          
          # Update main pom.xml
          mvn versions:set -DnewVersion=$VERSION
          
          # Update consumer-app pom.xml
          cd consumer-app
          mvn versions:set -DnewVersion=$VERSION
          mvn versions:set-property -Dproperty=demo-webapp.version -DnewVersion=$VERSION
          cd ..
          
          # Stage the changes
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add pom.xml consumer-app/pom.xml
          git commit -m "chore(release): prepare release $VERSION"
          
          # Set output for later steps
          echo "new_version=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build and Deploy
        run: |
          echo "Building and deploying version ${{ steps.version.outputs.new_version }}"
          
          # Build and deploy to GitHub Packages
          mvn -B clean deploy -DskipTests \
            -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository }}
          
          # Tag the release
          git tag -a v${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}"
          git push origin v${{ steps.version.outputs.new_version }}
          
          # Create GitHub Release
          gh release create v${{ steps.version.outputs.new_version }} \
            --title "Release ${{ steps.version.outputs.new_version }}" \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          
      - name: Update develop branch
        if: success()
        run: |
          # Ensure we're on the default branch
          git checkout ${{ github.event.repository.default_branch }}
          
          # Create a new version for development
          NEXT_DEV_VERSION="${{ steps.version.outputs.new_version }}-SNAPSHOT"
          
          # Update versions in pom files
          mvn versions:set -DnewVersion=$NEXT_DEV_VERSION
          cd consumer-app
          mvn versions:set -DnewVersion=$NEXT_DEV_VERSION
          mvn versions:set-property -Dproperty=demo-webapp.version -DnewVersion=${{ steps.version.outputs.new_version }}
          cd ..
          
          # Commit and push changes
          git add pom.xml consumer-app/pom.xml
          git commit -m "chore: prepare for next development iteration"
          git push origin ${{ github.event.repository.default_branch }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
